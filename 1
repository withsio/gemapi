<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gemini API 키 검증기</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .container {
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            backdrop-filter: blur(10px);
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
        }

        .header h1 {
            color: #333;
            font-size: 28px;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
            font-size: 14px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #333;
            font-weight: 600;
        }

        .api-key-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 14px;
            transition: all 0.3s ease;
            font-family: 'Courier New', monospace;
        }

        .api-key-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .check-btn {
            width: 100%;
            padding: 15px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .check-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        .check-btn:active {
            transform: translateY(0);
        }

        .check-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .result {
            margin-top: 20px;
            padding: 15px;
            border-radius: 10px;
            display: none;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .result.success {
            background: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .result.error {
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .result.warning {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
        }

        .result-icon {
            display: inline-block;
            margin-right: 10px;
            font-size: 18px;
        }

        .api-info {
            margin-top: 15px;
            font-size: 12px;
            opacity: 0.8;
            line-height: 1.4;
        }

        .quota-bar {
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 3px;
            overflow: hidden;
            margin: 5px 0;
        }

        .quota-fill {
            height: 100%;
            background: linear-gradient(90deg, #4ade80 0%, #eab308 70%, #ef4444 100%);
            border-radius: 3px;
            transition: width 0.3s ease;
        }

        .footer {
            text-align: center;
            margin-top: 30px;
            color: rgba(32, 178, 170, 0.7);
            font-size: 12px;
            padding: 15px;
            background: rgba(32, 178, 170, 0.05);
            border-radius: 10px;
            border: 1px solid rgba(32, 178, 170, 0.1);
        }

        @media (max-width: 480px) {
            .container {
                padding: 30px 20px;
            }
            
            .header h1 {
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🤖 Gemini API 키 검증기</h1>
            <p>Google Gemini API 키의 유효성을 확인해보세요</p>
        </div>

        <form id="apiForm">
            <div class="form-group">
                <label for="apiKey">API 키</label>
                <input 
                    type="password" 
                    id="apiKey" 
                    class="api-key-input"
                    placeholder="AIza... 형식의 API 키를 입력하세요"
                    required
                >
            </div>

            <button type="submit" class="check-btn" id="checkBtn">
                <span id="btnText">API 키 확인하기</span>
                <div class="loading" id="loading">
                    <div class="spinner"></div>
                </div>
            </button>
        </form>

        <div id="result" class="result"></div>

        <div class="footer">
            <p>⚠️ API 키는 서버에 저장되지 않으며, 브라우저에서만 처리됩니다.</p>
        </div>
    </div>

    <script>
        const form = document.getElementById('apiForm');
        const apiKeyInput = document.getElementById('apiKey');
        const checkBtn = document.getElementById('checkBtn');
        const btnText = document.getElementById('btnText');
        const loading = document.getElementById('loading');
        const result = document.getElementById('result');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const apiKey = apiKeyInput.value.trim();
            if (!apiKey) {
                showResult('error', '❌', 'API 키를 입력해주세요.');
                return;
            }

            // API 키 형식 간단 검증
            if (!apiKey.startsWith('AIza') || apiKey.length < 35) {
                showResult('warning', '⚠️', 'API 키 형식이 올바르지 않을 수 있습니다. Google AI Studio에서 발급받은 키인지 확인해주세요.');
                return;
            }

            setLoading(true);
            
            try {
                await checkGeminiAPI(apiKey);
            } catch (error) {
                console.error('Error:', error);
                showResult('error', '❌', `API 키 확인 중 오류가 발생했습니다: ${error.message}`);
            } finally {
                setLoading(false);
            }
        });

        async function checkGeminiAPI(apiKey) {
            try {
                // Gemini API의 models 엔드포인트를 사용하여 키 유효성 검사
                const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                if (response.ok) {
                    const data = await response.json();
                    const modelCount = data.models ? data.models.length : 0;
                    
                    showResult('success', '✅', 
                        `API 키가 유효합니다! 사용 가능한 모델: ${modelCount}개`,
                        `마지막 확인: ${new Date().toLocaleString('ko-KR')}`
                    );
                } else if (response.status === 400) {
                    const errorData = await response.json().catch(() => ({}));
                    showResult('error', '❌', 
                        'API 키가 유효하지 않습니다.',
                        'Google AI Studio에서 발급받은 올바른 키인지 확인해주세요.'
                    );
                } else if (response.status === 403) {
                    showResult('error', '❌', 
                        'API 키 접근이 거부되었습니다.',
                        'API 키 권한 설정을 확인하거나 할당량을 확인해주세요.'
                    );
                } else {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
            } catch (error) {
                if (error.name === 'TypeError' && error.message.includes('fetch')) {
                    showResult('error', '❌', 
                        'CORS 오류가 발생했습니다.',
                        '브라우저의 CORS 정책으로 인해 직접 확인이 어려울 수 있습니다. 대신 cURL이나 Postman을 사용해보세요.'
                    );
                } else {
                    throw error;
                }
            }
        }

        function showResult(type, icon, message, additionalInfo = '') {
            result.className = `result ${type}`;
            result.innerHTML = `
                <div>
                    <span class="result-icon">${icon}</span>
                    <strong>${message}</strong>
                </div>
                ${additionalInfo ? `<div class="api-info">${additionalInfo}</div>` : ''}
            `;
            result.style.display = 'block';
        }

        function setLoading(isLoading) {
            checkBtn.disabled = isLoading;
            if (isLoading) {
                btnText.style.visibility = 'hidden';
                loading.style.display = 'block';
            } else {
                btnText.style.visibility = 'visible';
                loading.style.display = 'none';
            }
        }

        // API 키 입력 시 결과 초기화
        apiKeyInput.addEventListener('input', () => {
            result.style.display = 'none';
        });

        // API 키 토글 표시/숨기기 기능
        apiKeyInput.addEventListener('dblclick', function() {
            this.type = this.type === 'password' ? 'text' : 'password';
        });
    </script>
</body>
</html>
